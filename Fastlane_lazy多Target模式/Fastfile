# fastlane_version "2.112.0"
default_platform :ios

platform :ios do

  #firim token
  FirToken = "*"
  #蒲同英
  PgyerApiKey = "*"
  PgyerUserKey = "*"


  ## Common
  desc "发布新版本到AppStore"
  lane :release do
    #默认env文件
    archiveRelease()
    uploadRelease()
  end

  desc "上传新版本到AppStore"
  lane :releaseupload do
    #默认env文件
    uploadRelease()
  end

  desc "发布One到AppStore"
  lane :releaseA do
    # actionRelease(name: ENV["Scheme_Name"], ipaDir: ENV["IpaDir_AppStore"])
    sh "fastlane release --env targetA"
  end

  desc "发布到Fir"
  lane :fir do
    #默认env文件
    archiveDevelopment() 
    uploadFir()
  end

  lane :firupload do 
    uploadFir()
  end

  desc "发布到pgyer"
  lane :pgy do
    #默认env文件
    archiveDevelopment()
    uploadPgyer()
  end

  desc "发布到pgyer"
  lane :pgyupload do
    #默认env文件
    uploadPgyer()
  end

  desc "one发布到Fir"
  lane :firA do
    # actionFir(name: ENV["Scheme_name"], ipaDir: ENV["IpaDir_Development"]) 
    sh "fastlane fir --env targetA"
  end

  desc "发布A到pgyer"
  lane :pgyA do
    #默认env文件
    sh "fastlane pgy --env targetA"
  end
 
  desc "[通用]发布新版本到 AppStore"
  def archiveRelease(name: ENV["Scheme_Name"], ipaDir: ENV["IpaDir_AppStore"])
    clear_cache_files()
    # cocoapods()
    updateBuildVersion(showHash: false)
    gym(
      output_directory: ipaDir,
      scheme: name,
      output_name: name,
      export_method: 'app-store',
      export_options: {
        export_xcargs: "-allowProvisioningUpdates",
        iCloudContainerEnvironment: 'Production'
      }
    )
  end

  desc "[通用]发布新版本到 AppStore"
  def uploadRelease(name: ENV["Scheme_Name"], ipaDir: ENV["IpaDir_AppStore"])
    deliver(force: true,
      # ipa: "/Users/shang/ACS/access-admin-app-ios/ipa_appStore/AccessControlSystem.ipa",
      ipa: "#{ipaDir}/#{name}.ipa",
      metadata_path: ENV["Metadata_Path"], 
      screenshots_path: ENV["Screenshots_Path"], 
    )
    # system "open #{ipaDir}"
    handleDingTalk(name: name, ipaDir: ipaDir, appUrl: ENV["App_Store_Link"])
  end 

  desc "[通用]发布新版本到 fir"
  def archiveDevelopment(name: ENV["Scheme_Name"], ipaDir: ENV["IpaDir_Development"])
    updateBuildVersion(showHash: true)
    gym(
      clean: true,
      include_symbols: true,
      output_directory: ipaDir,
      scheme: name,
      output_name: name,
      configuration: 'Debug',
      export_method: 'development',
      export_options: {
        export_xcargs: "-allowProvisioningUpdates",
        iCloudContainerEnvironment: 'Development'}
    )
  end

  desc "上传ipad 到 firim"
  def uploadFir(name: ENV["Scheme_Name"], ipaDir: ENV["IpaDir_Development"], firToken: FirToken)
    firim(firim_api_token: firToken, icon: ENV["App_Icon_Local"], ipa: "#{ipaDir}/#{name}.ipa")
    handleDingTalk(name: name, ipaDir: ipaDir)
  end

  desc "上传ipad 到 Pgyer"
  def uploadPgyer(name: ENV["Scheme_Name"], ipaDir: ENV["IpaDir_Development"], apiKey: PgyerApiKey, userKey: PgyerUserKey)
    # uploadtime = Time.now.strftime("%Y%m%d%H%M")
    uploadtime = Time.now.strftime("%Y-%m-%d %H:%M:%S")

    pgyer(api_key: apiKey, 
      user_key: userKey,
      # update_description: "fastlane自动打包上传测试 pgyer",  
      update_description: "#{uploadtime}", 
      password: "123456", 
      install_type: "2",
      ipa: "#{ipaDir}/#{name}.ipa",
    )
    handleDingTalk(name: name, ipaDir: ipaDir, appUrl: ENV["Pgyer_Shortcut_Link"])
  end


  desc "更新BuildVersion"
  def updateBuildVersion(name: ENV["Scheme_Name"], showHash: true)
    plistDir = File.dirname(Dir.pwd)
    puts "plist所在目录：_#{plistDir}_"

    case name
    when "IntelligentOfParkingOne"
      plistFile = plist_from_path(path: "#{plistDir}/#{name}/#{name}-Info.plist")

    else
      plistFile = plist_from_path(path: "#{plistDir}/#{name}/*Info.plist")

    end

    puts "plistFile：_#{plistFile}_"
    update_build({plist: plistFile, showHash: showHash})
  end


  desc "webhook 钉钉"
  def handleDingTalk(name: ENV["Scheme_Name"], ipaDir: ENV["IpaDir_Development"], downloadUrl: ENV["Firim_Shortcut_Link"])
    appPath = ipaDir + "/#{name}.ipa"
    params = {appPath: appPath,
              appIcon: ENV["App_Icon_Link"],
              dingUrl: ENV["Dingtalk_Url"],
              slogan: ENV["APP_Slogan"],
              downloadUrl: downloadUrl
              }
    puts "---#{params.to_json}--"
    dingdingtalk_robot(params)
  end


  desc "推送通知到slack"
  def handleDingSlack(name: ENV["Scheme_Name"], ipaDir: ENV["IpaDir_Development"], downloadUrl: ENV["Firim_Shortcut_Link"])
    appPath = ipaDir + "/#{name}.ipa"
    params = {appPath: appPath,
              appIcon: ENV["App_Icon_Link"],
              slackUrl: ENV["Slack_Url"],
              slogan: ENV["APP_Slogan"],
              downloadUrl: downloadUrl
              }
    puts "---#{params.to_json}--"
    dingslack_robot(params)
  end

  desc "archive方法 'to:'后跟 pgy/fir/release"
  lane :archive do |options|
    # puts "-#{options}-"

    platform = "#{options[:to]}"
    if platform.start_with?"pgy" 
      archiveDevelopment()
      pgyupload()
      
    elsif platform.start_with?"fir" 
      archiveDevelopment()
      firupload()

    elsif platform.start_with?"rel" 
      archiveRelease()
      releaseupload()

    else
      # puts "to:传参错误，请检查传参-#{options}-"
      archiveDevelopment()
      pgyupload()
      
    end
      
  end


  desc "upload方法 'to:'后跟 pgy/fir/release"
  lane :upload do |options|
    # puts "-#{options}-"

    platform = "#{options[:to]}"
    if platform.start_with?"pgy" 
      pgyupload()
      
    elsif platform.start_with?"fir" 
      firupload()

    elsif platform.start_with?"rel" 
      releaseupload()

    else
      # puts "to:传参错误，请检查传参-#{options}-"
      pgyupload()

    end
      
  end

  desc "测试"
  lane :test do
    # clear_cache_files()
    # puts "user name is: #{`whoami`}"  

    # account = "#{`whoami`}".delete "\n"
    # tokenfiles = "/Users/#{account}/Library/Caches/com.apple.amp.itmstransporter/UploadTokens/*.token"
    # UI.message "Token: #{tokenfiles}"

    handleDingSlack()
    # handleDingTalk()
  end

  desc "one发布到Fir"
  lane :testA do
    # actionFir(name: ENV["Scheme_name"], ipaDir: ENV["IpaDir_Development"]) 
    sh "fastlane test --env targetA"
  end

  # You can define as many lanes as you want
  after_all do |lane|

  end

  error do |lane, exception|

  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded.
# Learn more at https://github.com/fastlane/fastlane#metrics
