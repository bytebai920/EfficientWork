
fastlane_version "2.112.0"

default_platform :ios

platform :ios do
  # ipa包文件路径
  # ipaDirFir = File.dirname(Dir.pwd) + "/ipa_firim"
  # ipaDirAppStore = File.dirname(Dir.pwd) + "/ipa_appStore"

  # ipaDirFirOne = File.dirname(Dir.pwd) + "/ipa_firim/one"
  # ipaDirAppStoreOne = File.dirname(Dir.pwd) + "/ipa_appStore/one"

  #firim token
  FirToken = "*"

  ## Common
  desc "发布新版本到AppStore"
  lane :release do
    #默认env文件
    actionRelease()
  end

  desc "发布One到AppStore"
  lane :releaseA do
    # actionRelease(name: ENV["Scheme_Name"], ipaDir: ENV["IpaDir_AppStore"])
    sh "fastlane release --env targetA"
  end

  desc "发布到Fir"
  lane :fir do
    #默认env文件
    actionFir() 
  end

  desc "one发布到Fir"
  lane :firA do
    # actionFir(name: ENV["Scheme_name"], ipaDir: ENV["IpaDir_Fir"]) 
    sh "fastlane fir --env targetA"
  end

  desc "[通用]发布新版本到 AppStore"
  def actionRelease(name: ENV["Scheme_Name"], ipaDir: ENV["IpaDir_AppStore"])
    clear_cache_files()
    cocoapods()
    updateBuildVersion(showHash: false)
    gym(
      output_directory: ipaDir,
      scheme: name,
      export_options: {
        method: 'app-store',
      }
    )
    deliver(force: true, 
      metadata_path: ENV["MetaData_Path"], 
      screenshots_path: ENV["Screenshots_Path"]
    )
    handleDingTalkParams(name: name, ipaDir: ipaDir, isRelease: true)
  end

  desc "[通用]发布新版本到 fir"
  def actionFir(name: ENV["Scheme_Name"], ipaDir: ENV["IpaDir_Fir"], firToken: FirToken)
    cocoapods()
    updateBuildVersion(showHash: true)
    gym(
      clean: true,
      output_directory: ipaDir,
      scheme: name,
      configuration: 'Debug',
      include_symbols: true,
      export_options: {
        method: 'development'
      }
    )
    # 上传ipa到fir.im服务器，在fir.im获取firim_api_token
    firim(firim_api_token: firToken, icon: ENV["App_Icon_Local"])
    handleDingTalkParams(name: name, ipaDir: ipaDir)
  end

  desc "更新BuildVersion"
  def updateBuildVersion(name: ENV["Scheme_Name"], showHash: true)
    plistDir = File.dirname(Dir.pwd)
    puts "plist所在目录：_#{plistDir}_"

    case name
    when "IntelligentOfParkingOne"
      plistFile = plist_from_path(path: "#{plistDir}/#{name}/#{name}-Info.plist")

    else
      plistFile = plist_from_path(path: "#{plistDir}/#{name}/*Info.plist")

    end

    puts "plistFile：_#{plistFile}_"
    update_build({plist: plistFile, showHash: showHash})

  end

  #通用参数设置(有区别的参数才传入)
  def handleDingTalkParams(name: ENV["Scheme_Name"], ipaDir: ENV["IpaDir_Fir"], isRelease: false)
    appPath = ipaDir + "/#{name}.ipa" 
    appUrl  = isRelease == false ? ENV["Firim_Shortcut_Link"] : ENV["App_Store_Link"];

    params = {
                appPath: appPath,
                appUrl: appUrl,
                appIcon: ENV["App_Icon_Link"],
                dingUrl: ENV["Dingtalk_Url"]
              }
    puts "---#{params}--"
    dingdingtalk_robot(params)
  end

  desc "测试"
  lane :test do
    # clear_cache_files()
    # puts "user name is: #{`whoami`}"  

    # account = "#{`whoami`}".delete "\n"
    # tokenfiles = "/Users/#{account}/Library/Caches/com.apple.amp.itmstransporter/UploadTokens/*.token"
    # UI.message "Token: #{tokenfiles}"

    handleDingTalkParams()
    # handleDingTalkParams(ipaDir: ENV["IpaDir_AppStore"], isRelease: true)

  end

  desc "one发布到Fir"
  lane :testA do
    # actionFir(name: ENV["Scheme_name"], ipaDir: ENV["IpaDir_Fir"]) 
    sh "fastlane test --env targetA"
  end

  # You can define as many lanes as you want

  after_all do |lane|

  end

  error do |lane, exception|

  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded.
# Learn more at https://github.com/fastlane/fastlane#metrics
